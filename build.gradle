import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE"
    }
}

plugins {
    id "org.flywaydb.flyway" version "4.0"
    id "org.sonarqube" version "2.0.1"
    id "com.moowork.node" version "0.12"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'pmd'

jar {
    baseName = 'openlmis-referencedata'
    version  = '0.0.1'
}

repositories {
    mavenCentral()
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.projectlombok:lombok:1.16.8"
    compile "org.postgresql:postgresql:9.4.1208"
    compile "com.github.tomakehurst:wiremock:1.58"
    compile "org.springframework:spring-test"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.4.0"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:2.4.0"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.security.oauth:spring-security-oauth2"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.4.0"

    testCompile 'io.rest-assured:rest-assured:3.0.0'
    testCompile 'io.rest-assured:json-schema-validator:3.0.0'
    testCompile 'io.rest-assured:spring-mock-mvc:3.0.0'
    testCompile "com.jayway.restassured:rest-assured:2.7.0"

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "guru.nidi.raml:raml-tester:0.8.9"
    testCompile "junit:junit"
    testCompile "org.mockito:mockito-core:1.+"
    testCompile "org.powermock:powermock-api-mockito:1.6.5"
    testCompile "org.powermock:powermock-module-junit4:1.6.5"
}

idea {
    project {
        vcs = 'Git'
        ipr.withXml { xmlFile ->
            // enable 'Annotation Processors', source: https://gist.github.com/stephanos/8645809
            xmlFile.asNode().component
                    .find { it.@name == 'CompilerConfiguration' }['annotationProcessing'][0]
                    .replaceNode {
                annotationProcessing {
                    profile(default: true, name: 'Default', useClasspath: 'true', enabled: true)
                }
            }
        }
    }
}

flyway {
    url = "$System.env.DATABASE_URL"
    user = "$System.env.POSTGRES_USER"
    password = "$System.env.POSTGRES_PASSWORD"
    schemas = ['referencedata']
    sqlMigrationPrefix = ''
    placeholderPrefix = '#['
    placeholderSuffix = ']'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    reports.junitXml.destination = file("${testResultsDir}/${name}")
}

// Usage: gradle generateMigration [-PmigrationName=name_of_migration]
//          Defaults to 'migration' as migration name
// Example: gradle generateMigration -PmigrationName=add_column_to_users
//          Will create a file in migration folder with name yyyyMMddHHmmssSSS_add_column_to_users.sql.
task generateMigration << {
    description 'Creates an empty new file within the src/main/resources/db/migration directory into which developers can add new SQL migration code.'
    def fileName = project.hasProperty('migrationName') ? migrationName : 'migration'
    def timestamp = new Date().format('yyyyMMddHHmmssSSS', TimeZone.getTimeZone('GMT'))
    def fullFileName = "${timestamp}__${fileName}.sql"
    def migrationFile = new File(sourceSets.main.resources.srcDirs.first(),'db/migration/'+fullFileName)
    migrationFile.createNewFile()
}

task demoDataSeed(type:Exec) {
    executable "./demo-data/demo_seed.sh"
    args "./demo-data", "node ./demo-data/seed_generator.js"
}

task checkApiIsRaml(type:Exec) {
    executable "raml-cop"
    args "src/main/resources/api-definition.yaml"
}

configure(checkApiIsRaml) {
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = 'Verify that the api-specification is valid RAML'
}

test {
    testLogging {
        events 'started', 'passed'
        exceptionFormat = 'full'
    }
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
    }

    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}

checkstyle {
    toolVersion = "7.1"
}

//Usage: gradle sonarqube
sonarqube {
    properties {
        property "sonar.projectName", "OpenLMIS Reference Data Service"
        property "sonar.projectKey", "org.sonarqube:openlmis-referencedata"
        property "sonar.host.url", "http://sonar.openlmis.org"
        property "sonar.java.coveragePlugin", "jacoco"
        //Tells SonarQube where the unit tests execution reports are
        property "sonar.junit.reportsPath", "build/test-results/test"
        //Tells SonarQube where the unit tests code coverage report is
        property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
        //Tells SonarQube where the integration tests code coverage report is
        property "sonar.jacoco.itReportPath", "build/jacoco/integrationTest.exec"
	properties["sonar.tests"] += sourceSets.integrationTest.java
    }
}

build.dependsOn jacocoTestReport
// Makes sure checkstyle is run before build completes
build.dependsOn check

pmd {
    toolVersion = '5.4.0'
    consoleOutput= true
    ignoreFailures = false
    ruleSetFiles = files("config/pmd/ruleset.xml")
    reportsDir = file("build/reports/pmd")
}

tasks.withType(Pmd){
    reports {
        xml.enabled true
        html.enabled true
    }
}

def time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
time.setTimeZone(TimeZone.getTimeZone("GMT"))

def versionToCopy = copySpec {
    from 'src/main/resources'
    include 'version_template'
}

apply from: "documentation.gradle"
integrationTest.dependsOn copyRamlToBuild

check {
    dependsOn checkApiIsRaml
    dependsOn integrationTest
}
