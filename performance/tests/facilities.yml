# /api/facilities/${id}/approvedProducts endpoint is tested in another config files
execution:
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 60
    hold-for: ${__P(scenario-duration,600)}
    scenario: facility-create
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 60
    hold-for: ${__P(scenario-duration,600)}
    scenario: facilities-get-minimal-all
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 60
    hold-for: ${__P(scenario-duration,600)}
    scenario: facilities-get-minimal-one-page
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 60
    hold-for: ${__P(scenario-duration,600)}
    scenario: facilities-get-audit-log
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 60
    hold-for: ${__P(scenario-duration,600)}
    scenario: facility-update
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 60
    hold-for: ${__P(scenario-duration,600)}
    scenario: facilities-get-one
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 60
    hold-for: ${__P(scenario-duration,600)}
    scenario: facilities-get-by-boundary-all
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 60
    hold-for: ${__P(scenario-duration,600)}
    scenario: facilities-get-by-boundary-one-page
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 60
    hold-for: ${__P(scenario-duration,600)}
    scenario: facilities-delete-one
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 60
    hold-for: ${__P(scenario-duration,600)}
    scenario: facilities-get-all
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 60
    hold-for: ${__P(scenario-duration,600)}
    scenario: facilities-search-all
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 60
    hold-for: ${__P(scenario-duration,600)}
    scenario: facilities-search-one-page

scenarios:
  facility-type-get-single:
    requests:
      - if: '${__javaScript(vars.get("facility_type") == null)}'
        then:
          - url: ${__P(base-uri)}/api/facilityTypes/ac1d268b-ce10-455f-bf87-9c667da8f060
            method: GET
            label: GetSingleFacilityType
            headers:
              Authorization: Bearer ${access_token}
              Content-Type: application/json
            jsr223:
              script-text: |
                import groovy.json.JsonSlurper
                import groovy.json.JsonOutput

                def response = prev.getResponseDataAsString()
                def jsonSlurper = new JsonSlurper()
                def facilityType = jsonSlurper.parseText(response)

                vars.put("facility_type", JsonOutput.toJson(facilityType))
  facility-operator-get-single:
    requests:
      - if: '${__javaScript(vars.get("facility_operator") == null)}'
        then:
          - url: ${__P(base-uri)}/api/facilityOperators/9456c3e9-c4a6-4a28-9e08-47ceb16a4121
            method: GET
            label: GetSingleFacilityOperator
            headers:
              Authorization: Bearer ${access_token}
              Content-Type: application/json
            jsr223:
              script-text: |
                import groovy.json.JsonSlurper
                import groovy.json.JsonOutput

                def response = prev.getResponseDataAsString()
                def jsonSlurper = new JsonSlurper()
                def facilityOperator = jsonSlurper.parseText(response)

                vars.put("facility_operator", JsonOutput.toJson(facilityOperator))
  geographic-zone-get-single:
    requests:
      - if: '${__javaScript(vars.get("geographic_zone") == null)}'
        then:
          - url: ${__P(base-uri)}/api/geographicZones/4e471242-da63-436c-8157-ade3e615c848
            method: GET
            label: GetSingleGeographicZone
            headers:
              Authorization: Bearer ${access_token}
              Content-Type: application/json
            jsr223:
              script-text: |
                import groovy.json.JsonSlurper
                import groovy.json.JsonOutput

                def response = prev.getResponseDataAsString()
                def jsonSlurper = new JsonSlurper()
                def geographicZone = jsonSlurper.parseText(response)

                vars.put("geographic_zone", JsonOutput.toJson(geographicZone))
  facility-create:
    requests:
      - include-scenario: get-user-token
      - include-scenario: facility-type-get-single
      - include-scenario: facility-operator-get-single
      - include-scenario: geographic-zone-get-single
      - url: ${__P(base-uri)}/api/facilities
        method: POST
        label: CreateFacility
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json
        jsr223:
          execute: before
          script-text: |
            import groovy.json.JsonSlurper
            import groovy.json.JsonOutput

            def jsonSlurper = new JsonSlurper()
            def random = new Random()

            def facility = [
              code: "TF" + random.nextInt(),
              name: "Test facility",
              description: "This is a test facility",
              geographicZone: jsonSlurper.parseText(vars.get("geographic_zone")),
              type: jsonSlurper.parseText(vars.get("facility_type")),
              operator: jsonSlurper.parseText(vars.get("facility_operator")),
              active: "true",
              goLiveDate: '2017-11-29',
              comment: "Test comment",
              enabled: "true",
              openLmisAccessible: "true",
              supportedPrograms: [
                [ code: "PRG001", active: "true" ],
                [ code: "PRG002", active: "true" ]
              ]
            ]

            vars.put("facility", JsonOutput.toJson(facility))
        body: ${facility}
        extract-jsonpath:
          facility_id: $.id
  facilities-get-minimal-all:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/facilities/minimal
        method: GET
        label: GetAllMinimalFacilities
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json
  facilities-get-minimal-one-page:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/facilities/minimal?page=0&size=10
        method: GET
        label: GetFirstTenMinimalFacilities
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json
  facilities-get-audit-log:
    requests:
      - include-scenario: facilities-get-one
      - url: ${__P(base-uri)}/api/facilities/${facility_id}/auditLog
        method: GET
        label: GetFacilityAuditLog
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json
  facility-update:
    requests:
      - include-scenario: facilities-get-one
      - url: ${__P(base-uri)}/api/facilities/${facility_id}
        method: PUT
        label: UpdateFacility
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json
        jsr223:
          execute: before
          script-text: |
            import groovy.json.JsonSlurper
            import groovy.json.JsonOutput

            def response = prev.getResponseDataAsString()
            def jsonSlurper = new JsonSlurper()

            def facility = jsonSlurper.parseText(response)
            facility.name = "Updated Test facility"

            vars.put("facility", JsonOutput.toJson(facility))
        body: ${facility}
  facilities-get-one:
    requests:
      - include-scenario: facility-create
      - url: ${__P(base-uri)}/api/facilities/${facility_id}
        method: GET
        label: GetFacility
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json
  facilities-get-by-boundary-all:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/facilities/byBoundary
        method: POST
        label: GetAllFacilitiesByBoundary
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json
        jsr223:
          execute: before
          script-text: |
            import groovy.json.JsonOutput

            def boundary = [
              type: "Polygon",
              coordinates: [
                [
                  [ 37.5, -7.5 ],
                  [ 37.5, -17.5 ],
                  [ 30, -17.5 ],
                  [ 30, -7.5 ],
                  [ 37.5, -7.5 ]
                ]
              ]
            ]

            vars.put("boundary", JsonOutput.toJson(boundary))
        body: ${boundary}
  facilities-get-by-boundary-one-page:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/facilities/byBoundary?page=0&size=10
        method: POST
        label: GetFirstTenFacilitiesByBoundary
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json
        jsr223:
          execute: before
          script-text: |
            import groovy.json.JsonOutput

            def boundary = [
              type: "Polygon",
              coordinates: [
                [
                  [ 37.5, -7.5 ],
                  [ 37.5, -17.5 ],
                  [ 30, -17.5 ],
                  [ 30, -7.5 ],
                  [ 37.5, -7.5 ]
                ]
              ]
            ]

            vars.put("boundary", JsonOutput.toJson(boundary))
        body: ${boundary}
  facilities-delete-one:
    requests:
      - include-scenario: facilities-get-one
      - url: ${__P(base-uri)}/api/facilities/${facility_id}
        method: DELETE
        label: DeleteFacility
        headers:
          Authorization: Bearer ${access_token}
  facilities-get-all:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/facilities
        method: GET
        label: GetAllFacilities
        headers:
          Authorization: Bearer ${access_token}
  facilities-search-all:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/facilities?type=health_center
        method: GET
        label: FindAllHealthCenterFacilities
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json
  facilities-search-one-page:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/facilities?type=health_center&page=0&size=10
        method: GET
        label: FindFirstTenHealthCenterFacilities
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json

reporting:
  - module: passfail
    criteria:
      - 'p90<=2000ms, continue as passed, label=CreateFacility, title="Create Facility is successful"'
      - 'p90>2000ms and p90<=3000ms, continue as passed, label=CreateFacility, title="Create Facility needs improvement"'
      - 'p90>3000ms, continue as failed, label=CreateFacility, title="Create Facility is too slow"'

      - 'p90<=1500ms, continue as passed, label=GetAllMinimalFacilities, title="Get All Minimal Facilities is successful"'
      - 'p90>1500ms and p90<=2500ms, continue as passed, label=GetAllMinimalFacilities, title="Get All Minimal Facilities needs improvement"'
      - 'p90>2500ms, continue as failed, label=GetAllMinimalFacilities, title="Get All Minimal Facilities is too slow"'

      - 'p90<=1500ms, continue as passed, label=GetFirstTenMinimalFacilities, title="Get First Ten Minimal Facilities is successful"'
      - 'p90>1500ms and p90<=2500ms, continue as passed, label=GetFirstTenMinimalFacilities, title="Get First Ten Minimal Facilities needs improvement"'
      - 'p90>2500ms, continue as failed, label=GetFirstTenMinimalFacilities, title="Get First Ten Minimal Facilities is too slow"'

      - 'p90<=3000ms, continue as passed, label=GetFacilityAuditLog, title="Get Facility Audit Log is successful"'
      - 'p90>3000ms and p90<=5000ms, continue as passed, label=GetFacilityAuditLog, title="Get Facility Audit Log needs improvement"'
      - 'p90>5000ms, continue as failed, label=GetFacilityAuditLog, title="Get Facility Audit Log is too slow"'

      - 'p90<=2500ms, continue as passed, label=UpdateFacility, title="Update Facility is successful"'
      - 'p90>2500ms and p90<=4000ms, continue as passed, label=UpdateFacility, title="Update Facility needs improvement"'
      - 'p90>4000ms, continue as failed, label=UpdateFacility, title="Update Facility is too slow"'

      - 'p90<=1500ms, continue as passed, label=GetFacility, title="Get Facility is successful"'
      - 'p90>1500ms and p90<=2500ms, continue as passed, label=GetFacility, title="Get Facility needs improvement"'
      - 'p90>2500ms, continue as failed, label=GetFacility, title="Get Facility is too slow"'

      - 'p90<=3000ms, continue as passed, label=GetAllFacilitiesByBoundary, title="Get All Facilities By Boundary is successful"'
      - 'p90>3000ms and p90<=5000ms, continue as passed, label=GetAllFacilitiesByBoundary, title="Get All Facilities By Boundary needs improvement"'
      - 'p90>5000ms, continue as failed, label=GetAllFacilitiesByBoundary, title="Get All Facilities By Boundary is too slow"'

      - 'p90<=3000ms, continue as passed, label=GetFirstTenFacilitiesByBoundary, title="Get First Ten Facilities By Boundary is successful"'
      - 'p90>3000ms and p90<=5000ms, continue as passed, label=GetFirstTenFacilitiesByBoundary, title="Get First Ten Facilities By Boundary needs improvement"'
      - 'p90>5000ms, continue as failed, label=GetFirstTenFacilitiesByBoundary, title="Get First Ten Facilities By Boundary is too slow"'

      - 'p90<=1500ms, continue as passed, label=DeleteFacility, title="Delete Facility is successful"'
      - 'p90>1500ms and p90<=2500ms, continue as passed, label=DeleteFacility, title="Delete Facility needs improvement"'
      - 'p90>2500ms, continue as failed, label=DeleteFacility, title="Delete Facility is too slow"'

      - 'p90<=1500ms, continue as passed, label=GetAllFacilities, title="Get All Facilities is successful"'
      - 'p90>1500ms and p90<=2500ms, continue as passed, label=GetAllFacilities, title="Get All Facilities needs improvement"'
      - 'p90>2500ms, continue as failed, label=GetAllFacilities, title="Get All Facilities is too slow"'

      - 'p90<=1500ms, continue as passed, label=FindAllHealthCenterFacilities, title="Find All Health Center Facilities is successful"'
      - 'p90>1500ms and p90<=2500ms, continue as passed, label=FindAllHealthCenterFacilities, title="Find All Health Center Facilities needs improvement"'
      - 'p90>2500ms, continue as failed, label=FindAllHealthCenterFacilities, title="Find All Health Center Facilities is too slow"'

      - 'p90<=1500ms, continue as passed, label=FindFirstTenHealthCenterFacilities, title="Find First Ten Health Center Facilities is successful"'
      - 'p90>1500ms and p90<=2500ms, continue as passed, label=FindFirstTenHealthCenterFacilities, title="Find First Ten Health Center Facilities needs improvement"'
      - 'p90>2500ms, continue as failed, label=FindFirstTenHealthCenterFacilities, title="Find First Ten Health Center Facilities is too slow"'
