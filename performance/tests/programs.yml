execution:
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 1m
    hold-for: ${__P(scenario-duration,600)}
    scenario: programs-get-one
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 1m
    hold-for: ${__P(scenario-duration,600)}
    scenario: programs-search
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 1m
    hold-for: ${__P(scenario-duration,600)}
    scenario: create-program
  - concurrency: ${__P(scenario-concurrency,10)}
    iterations: 10
    ramp-up: 1m
    hold-for: ${__P(scenario-duration,600)}
    scenario: delete-program

scenarios:
  programs-get-one:
    variables:
      program_id: dce17f2e-af3e-40ad-8e00-3496adef44c3
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/programs/${program_id}
        method: GET
        label: GetProgram
        headers:
          Authorization: Bearer ${access_token}
  programs-search:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/programs
        method: GET
        label: GetAllPrograms
        headers:
          Authorization: Bearer ${access_token}
  create-program:
    requests:
      - include-scenario: get-user-token
      - url: ${__P(base-uri)}/api/programs
        method: POST
        label: CreateProgram
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json
        jsr223:
          execute: before
          script-text: |
            import groovy.json.JsonOutput

            def random = new Random();

            def program = [
              code: "code" + random.nextInt(),
              name: "test name" + random.nextInt(),
              description: "test description",
              periodsSkippable: false,
              skipAuthorization: false,
              enableDatePhysicalStockCountCompleted: false
            ];

            vars.put("program", JsonOutput.toJson(program));
        body: ${program}
        extract-jsonpath:
          program_id: $.id
  delete-program:
    requests:
      - include-scenario: create-program
      - url: ${__P(base-uri)}/api/programs/${program_id}
        method: DELETE
        label: DeleteProgram
        headers:
          Authorization: Bearer ${access_token}

reporting:
  - module: passfail
    criteria:
      - 'GetProgram too high error rate: failures>1%, continue as failed, label=GetProgram, title="GetProgram error rate too high"'
      - 'GetProgram is too slow: p90>2500ms, stop as failed, label=GetProgram, title="GetProgram response time too high"'
      - 'GetProgram needs improvement: p90>1500ms and p90<=2500ms, continue as passed, label=GetProgram, title="GetProgram needs improvement"'
      - 'GetAllPrograms too high error rate: failures>1%, continue as failed, label=GetAllPrograms, title="GetAllPrograms error rate too high"'
      - 'GetAllPrograms is too slow: p90>2500ms, stop as failed, label=GetAllPrograms, title="GetAllPrograms response time too high"'
      - 'GetAllPrograms needs improvement: p90>1500ms and p90<=2500ms, continue as passed, label=GetAllPrograms, title="GetAllPrograms needs improvement"'
      - 'CreateProgram too high error rate: failures>1%, continue as failed, label=CreateProgram, title="CreateProgram error rate too high"'
      - 'CreateProgram is too slow: p90>3000ms, stop as failed, label=CreateProgram, title="CreateProgram response time too high"'
      - 'CreateProgram needs improvement: p90>2000ms and p90<=3000ms, continue as passed, label=CreateProgram, title="CreateProgram needs improvement"'
      - 'DeleteProgram too high error rate: failures>1%, continue as failed, label=DeleteProgram, title="DeleteProgram error rate too high"'
      - 'DeleteProgram is too slow: p90>2500ms, stop as failed, label=DeleteProgram, title="DeleteProgram response time too high"'
      - 'DeleteProgram needs improvement: p90>1500ms and p90<=2500ms, continue as passed, label=DeleteProgram, title="DeleteProgram needs improvement"'
